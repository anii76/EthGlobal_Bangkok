/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LendingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADDRESSES_PROVIDER"
      | "POOL"
      | "allowanceToken"
      | "approveToken"
      | "collateralToken"
      | "getBalance"
      | "getUserAccountData"
      | "loanToken"
      | "userCreditScores"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADDRESSES_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "POOL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowanceToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveToken",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccountData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "loanToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userCreditScores",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADDRESSES_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "POOL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loanToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userCreditScores",
    data: BytesLike
  ): Result;
}

export interface Lending extends BaseContract {
  connect(runner?: ContractRunner | null): Lending;
  waitForDeployment(): Promise<this>;

  interface: LendingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADDRESSES_PROVIDER: TypedContractMethod<[], [string], "view">;

  POOL: TypedContractMethod<[], [string], "view">;

  allowanceToken: TypedContractMethod<
    [_poolContractAddress: AddressLike],
    [bigint],
    "view"
  >;

  approveToken: TypedContractMethod<
    [_amount: BigNumberish, _poolContractAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;

  collateralToken: TypedContractMethod<[], [string], "view">;

  getBalance: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  getUserAccountData: TypedContractMethod<
    [_userAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalCollateralBase: bigint;
        totalDebtBase: bigint;
        availableBorrowsBase: bigint;
        currentLiquidationThreshold: bigint;
        ltv: bigint;
        healthFactor: bigint;
      }
    ],
    "view"
  >;

  loanToken: TypedContractMethod<[], [string], "view">;

  userCreditScores: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADDRESSES_PROVIDER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowanceToken"
  ): TypedContractMethod<[_poolContractAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "approveToken"
  ): TypedContractMethod<
    [_amount: BigNumberish, _poolContractAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collateralToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserAccountData"
  ): TypedContractMethod<
    [_userAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalCollateralBase: bigint;
        totalDebtBase: bigint;
        availableBorrowsBase: bigint;
        currentLiquidationThreshold: bigint;
        ltv: bigint;
        healthFactor: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "loanToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userCreditScores"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  filters: {};
}
