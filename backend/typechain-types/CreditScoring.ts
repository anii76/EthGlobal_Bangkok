/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CreditScoringInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateCreditScore"
      | "calculateScore"
      | "getLiquidity"
      | "getProtocolScore"
      | "getRepaymentHistory"
      | "getTokenHoldingsRisk"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateCreditScore",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidity",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRepaymentHistory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenHoldingsRisk",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateCreditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepaymentHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenHoldingsRisk",
    data: BytesLike
  ): Result;
}

export interface CreditScoring extends BaseContract {
  connect(runner?: ContractRunner | null): CreditScoring;
  waitForDeployment(): Promise<this>;

  interface: CreditScoringInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateCreditScore: TypedContractMethod<
    [
      liquidity: BigNumberish,
      stability: BigNumberish,
      risk: BigNumberish,
      reputation: BigNumberish,
      activity: BigNumberish
    ],
    [bigint],
    "view"
  >;

  calculateScore: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getLiquidity: TypedContractMethod<
    [user: AddressLike, chainId: BigNumberish],
    [bigint],
    "view"
  >;

  getProtocolScore: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getRepaymentHistory: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getTokenHoldingsRisk: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateCreditScore"
  ): TypedContractMethod<
    [
      liquidity: BigNumberish,
      stability: BigNumberish,
      risk: BigNumberish,
      reputation: BigNumberish,
      activity: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateScore"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLiquidity"
  ): TypedContractMethod<
    [user: AddressLike, chainId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProtocolScore"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRepaymentHistory"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenHoldingsRisk"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;

  filters: {};
}
